name: Deploy to EC2
on:
  workflow_run:
    workflows: ["Node.js CI"]
    types:
      - completed
env:
  AWS_REGION: eu-central-1
  EC2_HOST: ec2-3-64-57-137.eu-central-1.compute.amazonaws.com
  DEPLOY_PATH: /var/www/pwa
  SSH_USER: ec2-user
  AWS_PLATFORM: linux/amd64
permissions:
  contents: read
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: |
        NODE_ENV=production npm run build
        echo "Checking build output:"
        ls -la dist/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate deployment package
      run: |
        cd dist
        tar -czf ../deployment.tar.gz .

    - name: Deploy to EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        # Debug: PrÃ¼fe ob tar-Datei existiert
        ls -la deployment.tar.gz
        
        # Write the SSH key to a file
        echo "$SSH_PRIVATE_KEY" > deploy_key
        chmod 600 deploy_key
        
        # Upload deployment package
        scp -i deploy_key -o StrictHostKeyChecking=no deployment.tar.gz ${{ env.SSH_USER }}@${{ env.EC2_HOST }}:/tmp/
        
        # Execute deployment commands
        ssh -i deploy_key -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.EC2_HOST }} << EOF
          # Set timestamp
          TIMESTAMP=\$(date +%Y%m%d_%H%M%S)
          RELEASE_DIR=${{ env.DEPLOY_PATH }}/releases/\$TIMESTAMP
          
          echo "Creating directory: \$RELEASE_DIR"
          sudo mkdir -p \$RELEASE_DIR
          
          echo "Extracting files..."
          cd /tmp
          sudo tar -xzf deployment.tar.gz -C \$RELEASE_DIR
          
          echo "Setting permissions..."
          sudo chown -R nginx:nginx \$RELEASE_DIR
          
          echo "Updating symlink..."
          sudo ln -sfn \$RELEASE_DIR ${{ env.DEPLOY_PATH }}/current
          
          echo "Cleaning up..."
          cd ${{ env.DEPLOY_PATH }}/releases && ls -t | tail -n +6 | xargs -r sudo rm -rf
          rm /tmp/deployment.tar.gz
EOF
        
        rm deploy_key
